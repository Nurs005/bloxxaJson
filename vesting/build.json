{
    "language": "Solidity",
    "sources": {
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
        },
        "contracts/vesting.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title Vesting contract.\r\n * @dev A contract for vesting ERC20 tokens with multiple vesting schedules.\r\n */\r\ncontract Vesting is Ownable, ReentrancyGuard{\r\n\r\n    /**\r\n     * @dev Sets the token that will be vested.\r\n     * @param _vestingToken The address of the ERC20 token contract.\r\n     * @param _initialAddress The owner account.\r\n     */\r\n    constructor(address _vestingToken, address _initialAddress) Ownable(_initialAddress){\r\n        require(_vestingToken != address(0), \"Zero address\");\r\n        token = IERC20(_vestingToken);\r\n    }\r\n\r\n    IERC20 public token;\r\n\r\n    struct VestingSchedule {\r\n        uint totalAmount;\r\n        uint amountReleased;\r\n        uint claimedPeriodAmount;\r\n    }\r\n\r\n    struct VestingCreation {\r\n        uint pool;\r\n        uint beneficiariesAmount;\r\n        address[] beneficiariesAdresses;\r\n        uint cliffPeriod;\r\n        uint vestingPeriod;\r\n        uint tge;\r\n        uint startTimestamp;\r\n        mapping(address => VestingSchedule) beneficiaries;\r\n    }\r\n\r\n    uint public unlockPeriod = 30 days;\r\n\r\n    event BeneficiaryAdded(address indexed user, uint indexed vestingId, VestingSchedule schedule);\r\n    event BeneficiaryBatchAdded(address[] indexed users, uint[] totalAmounts, uint indexed vestingId);\r\n    event Claimed(address indexed user, uint indexed vestingId, uint amount);\r\n    event UnlockPeriodUpdated(uint newPeriod);\r\n    event StartTimeUpdated(uint indexed vestingId, uint newTime);\r\n\r\n    mapping(uint => VestingCreation) public vestingInfo;\r\n    \r\n    /**\r\n     * @notice Sets the token address for the vesting contract.\r\n     * @dev Only the owner can call this function.\r\n     * @param _token The address of the ERC20 token contract.\r\n     */\r\n    function setTokenAddress(address _token) external onlyOwner {\r\n        require(address(_token) != address(0), \"Token address cannot be zero\");\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the unlock period for vesting.\r\n     * @dev Only the owner can call this function.\r\n     * @param newPeriod The new unlock period in seconds.\r\n     */\r\n    function setUnlockPeriod(uint newPeriod) external onlyOwner(){\r\n        require(unlockPeriod > 0, \"Period can not be zero\");\r\n        unlockPeriod = newPeriod;\r\n        emit UnlockPeriodUpdated(newPeriod);\r\n    }\r\n\r\n    function getBeneficiaryInfo(uint _vestingId, address _beneficiary) public view returns(VestingSchedule memory){\r\n        return vestingInfo[_vestingId].beneficiaries[_beneficiary];\r\n    }\r\n\r\n    function getBeneficiaries(uint _vestingId) public view returns(address[] memory){\r\n        return vestingInfo[_vestingId].beneficiariesAdresses;\r\n    } \r\n\r\n    /**\r\n     * @notice Sets the start time for a vesting schedule.\r\n     * @dev Only the owner can call this function.\r\n     * @param _vestingId The ID of the vesting.\r\n     * @param _timestamp The start timestamp.\r\n     */\r\n    function setStartTime(uint _vestingId, uint _timestamp) external onlyOwner {\r\n        require(_timestamp >= block.timestamp, \"Start time cannot be in the past\");\r\n        vestingInfo[_vestingId].startTimestamp = _timestamp;\r\n        emit StartTimeUpdated(_vestingId, _timestamp);\r\n    }\r\n    /**\r\n     * @notice Gets the next claimable timestamp for a user.\r\n     * @param _vestingId The ID of the vesting.\r\n     * @return The next claimable timestamp.\r\n     */\r\n    function getNextClaimTimestamp(uint _vestingId) external view returns(uint){\r\n        uint startTimestamp = vestingInfo[_vestingId].startTimestamp;\r\n        require(block.timestamp >= startTimestamp, \"Vesting hasn't started yet\");\r\n        if(startTimestamp == 0){\r\n            return 0;\r\n        }else{\r\n            if(block.timestamp >= (startTimestamp + vestingInfo[_vestingId].cliffPeriod)){\r\n                uint periodAmount = (block.timestamp - (startTimestamp + vestingInfo[_vestingId].cliffPeriod)) / unlockPeriod;\r\n                return (startTimestamp + vestingInfo[_vestingId].cliffPeriod) + ((periodAmount + 1)*unlockPeriod);\r\n            }else{\r\n                return (startTimestamp + vestingInfo[_vestingId].cliffPeriod) + unlockPeriod;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a new specific vesting schedule.\r\n     * @dev Only the owner can call this function.\r\n     * @param _vestingId The ID of the vesting.\r\n     * @param _pool The total amount of tokens to be vested.\r\n     * @param _cliffPeriod The cliff period of the vesting.\r\n     * @param _vestingPeriod The vesting period of the vesting.\r\n     * @param _tge The token generation event percentage of the vesting.\r\n     */\r\n\r\n    function createVesting(\r\n        uint _vestingId, \r\n        uint _pool,\r\n        uint _cliffPeriod,\r\n        uint _vestingPeriod, \r\n        uint _tge,\r\n        uint _startTimeStamp\r\n    ) public  onlyOwner {\r\n        VestingCreation storage newVesting = vestingInfo[_vestingId];\r\n        newVesting.pool = _pool;\r\n        newVesting.beneficiariesAmount = 0;\r\n        newVesting.cliffPeriod = _cliffPeriod;\r\n        newVesting.vestingPeriod = _vestingPeriod;\r\n        newVesting.tge = _tge;\r\n        newVesting.startTimestamp = _startTimeStamp;\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Adds a new beneficiary to a specific   vesting schedule.\r\n     * @dev Only the owner can call this function.\r\n     * @param _beneficiary The address of the beneficiary.\r\n     * @param _totalAmount The total amount of tokens to be vested.\r\n     * @param _vestingId The ID of the vesting.\r\n     */\r\n    function addBeneficiary(\r\n        address _beneficiary,\r\n        uint256 _totalAmount,\r\n        uint _vestingId\r\n    ) public onlyOwner{\r\n        require(_beneficiary != address(0), \"Beneficiary cannot be zero address\");\r\n        require(_totalAmount > 0, \"Total amount must be greater than zero\");\r\n        require(vestingInfo[_vestingId].pool >= _totalAmount, \"No tokens in pool\");\r\n\r\n        vestingInfo[_vestingId].beneficiaries[_beneficiary] = VestingSchedule({\r\n        totalAmount: _totalAmount,\r\n        amountReleased:0,\r\n        claimedPeriodAmount: 0\r\n        });\r\n        vestingInfo[_vestingId].beneficiariesAdresses.push(_beneficiary);\r\n        vestingInfo[_vestingId].pool -= _totalAmount;\r\n        vestingInfo[_vestingId].beneficiariesAmount++;\r\n    }\r\n    /**\r\n     * @notice Adds multiple beneficiaries to a specific   vesting schedule.\r\n     * @dev Only the owner can call this function.\r\n     * @param _beneficiaries The addresses of the beneficiaries.\r\n     * @param _totalAmounts The total amounts of tokens to be vested.\r\n     * @param _vestingId The ID of the vesting.\r\n     */\r\n    function addBatchBeneficiary(\r\n        address[] calldata _beneficiaries,\r\n        uint256[] calldata _totalAmounts,\r\n        uint256 _vestingId\r\n    ) external onlyOwner{\r\n        require(_beneficiaries.length == _totalAmounts.length, \"Length should be equal\");\r\n        for(uint i=0; i<_beneficiaries.length; i++){\r\n            addBeneficiary(_beneficiaries[i], _totalAmounts[i], _vestingId);\r\n        }\r\n        emit BeneficiaryBatchAdded(_beneficiaries, _totalAmounts, _vestingId);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the available amount to claim and the period amount for a beneficiary.\r\n     * @param _beneficiary The address of the beneficiary.\r\n     * @param _vestingId The ID of the vesting.\r\n     * @return The available amount to claim and the period amount.\r\n     */\r\n    function availableToClaim(address _beneficiary, uint _vestingId) public view returns(uint, uint){\r\n        VestingSchedule memory beneficiary = vestingInfo[_vestingId].beneficiaries[_beneficiary];\r\n        uint startTimestamp = vestingInfo[_vestingId].startTimestamp;\r\n        require(startTimestamp != 0 && startTimestamp <= block.timestamp, \"Vesting hasn't started yet\");\r\n\r\n        uint amount = beneficiary.totalAmount;\r\n        uint tgeAmount = beneficiary.totalAmount * vestingInfo[_vestingId].tge / 100;\r\n        uint withoutTge = amount - tgeAmount;\r\n\r\n        uint cliffEndTime = startTimestamp + vestingInfo[_vestingId].cliffPeriod;\r\n        uint vestingEndTime = startTimestamp +  vestingInfo[_vestingId].vestingPeriod;\r\n\r\n        \r\n        if(amount <= beneficiary.amountReleased){\r\n            return (0, beneficiary.claimedPeriodAmount);\r\n        }\r\n\r\n        if(cliffEndTime <= block.timestamp){\r\n            if(vestingEndTime <= block.timestamp){\r\n                return (amount - beneficiary.amountReleased, (vestingEndTime - cliffEndTime) / unlockPeriod);\r\n            }else{\r\n                uint periodAmount = (block.timestamp - cliffEndTime) / unlockPeriod;\r\n                return (withoutTge * ((periodAmount - beneficiary.claimedPeriodAmount) * unlockPeriod) / vestingInfo[_vestingId].vestingPeriod, periodAmount);\r\n            }\r\n        }else{\r\n            return (tgeAmount - beneficiary.amountReleased, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Claims the available vested tokens for the sender.\r\n     * @dev Only callable by the beneficiary.\r\n     * @param _vestingId The ID of the vesting.\r\n     */\r\n    function claim(uint _vestingId) external nonReentrant(){\r\n        (uint availableAmount, uint period) = availableToClaim(msg.sender, _vestingId);\r\n        require(availableAmount > 0, \"There are no tokens available\");\r\n        VestingSchedule storage beneficiary = vestingInfo[_vestingId].beneficiaries[msg.sender];\r\n        beneficiary.amountReleased += availableAmount;\r\n        beneficiary.claimedPeriodAmount = period;\r\n        require(token.transfer(msg.sender, availableAmount), \"Transfer failed\");\r\n        emit Claimed(msg.sender, _vestingId, availableAmount);\r\n    }\r\n    /**\r\n     * @notice Trasnfer tokens\r\n     * @dev Only callable by the owner.\r\n     * @param account address of the account where to tokens will be transferred.\r\n     * @param amount amount tokens that will  be transferred.\r\n     */\r\n    function transferTokens(address account, uint amount) external onlyOwner(){\r\n        require(token.transfer(account, amount), \"Transfer failed\");\r\n    }\r\n}"
        }
    },
    "settings": {
        "evmVersion": "paris",
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}