{
    "language": "Solidity",
    "sources": {
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "contracts/Staking.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/// @title Staking contract with static APR.\r\n/// @notice Reward rate must be set at the base point.\r\n\r\ncontract Staking is Ownable {\r\n    IERC20 public stakingToken; // Reward token.\r\n    uint256 public rewardRate; // Annual Percentage Rate at base point.\r\n    uint256 public lockPeriod; // Period when user can't withdraw stake.\r\n    uint256 public minStake;\r\n    uint256 public maxStake;\r\n    uint public poolValue; // Reward pool available;\r\n    uint public totalStaked; // Total staked amount;\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 lastClaimTimestamp;\r\n    }\r\n\r\n    mapping(address => uint256) public userTotalStaked;\r\n    mapping(address => Stake[]) public stakes;\r\n\r\n    /// @param _stakingToken Reward token address.\r\n    /// @param _minStake Minimal amount available stake.\r\n    /// @param _maxStake Maximal amount available stake. \r\n    /// @param _lockPeriod  Period when user can't withdraw stake.\r\n    /// @param _rewardRate Annual Percentage Rate at base point.\r\n    /// @param _initialAddress Owner address.\r\n    /// @param _poolValue  Total reward amount.\r\n\r\n    constructor(\r\n    address _stakingToken, \r\n    uint256 _minStake, \r\n    uint256 _maxStake,\r\n    uint256 _lockPeriod,\r\n    uint256 _rewardRate, \r\n    address _initialAddress, \r\n    uint _poolValue\r\n    )Ownable(_initialAddress) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardRate = _rewardRate;\r\n        lockPeriod = _lockPeriod;\r\n        minStake = _minStake;\r\n        maxStake = _maxStake;\r\n        poolValue = _poolValue;\r\n    }\r\n\r\n    /// @param userAddress The address for which the reward is calculated.\r\n    /// @param stakeIndex Stake count.\r\n\r\n    function calculateReward(address userAddress, uint256 stakeIndex) public view returns (uint256 rewardAmount){\r\n        Stake memory userStake = stakes[userAddress][stakeIndex];\r\n        uint256 elapsedSeconds = block.timestamp - userStake.lastClaimTimestamp;\r\n        rewardAmount = (userStake.amount * elapsedSeconds * rewardRate) / (10000 * 365 days);\r\n    }\r\n\r\n    function getUserStakes(address userAddress) external view returns (Stake[] memory userStakes) {\r\n        return stakes[userAddress];\r\n    }\r\n\r\n    function stake(uint256 _amount) public {\r\n        require(_amount >= minStake, \"The amount must be greater than minimum\");\r\n        require(userTotalStaked[msg.sender] <= maxStake, \"Max stake amount reached\");\r\n\r\n        userTotalStaked[msg.sender] += _amount;\r\n        stakes[msg.sender].push(Stake(_amount, block.timestamp, block.timestamp));\r\n        totalStaked += _amount;\r\n        require(stakingToken.transferFrom(msg.sender, address(this), _amount), \"Token transfer failed\");\r\n    }\r\n\r\n    /// @param stakeIndex Stake count.\r\n\r\n    function claimReward(uint256 stakeIndex) public {\r\n        uint256 rewardAmount = calculateReward(msg.sender, stakeIndex);\r\n        stakes[msg.sender][stakeIndex].lastClaimTimestamp = block.timestamp;\r\n        require(stakingToken.transfer(msg.sender, rewardAmount), \"Token transfer failed\");\r\n        poolValue -= rewardAmount;\r\n    }\r\n\r\n    /// @notice Claim reward for all user stakes.\r\n\r\n    function claimAllRewards() external {\r\n        Stake[] memory userStakes = stakes[msg.sender];\r\n        for(uint256 i; i < userStakes.length; i++) {\r\n            claimReward(i);\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw only one stake with reward.\r\n\r\n    function withdraw(uint256 stakeIndex) public  {\r\n        Stake storage userStake = stakes[msg.sender][stakeIndex];\r\n        uint256 elapsedSeconds = block.timestamp - userStake.startTime;\r\n\r\n        require(elapsedSeconds > lockPeriod, \"Early withdrawal is not allowed\");\r\n\r\n        uint256 rewardAmount = calculateReward(msg.sender, stakeIndex);\r\n        poolValue -= rewardAmount;\r\n\r\n        require(userStake.amount > 0, \"Stake is empty\");\r\n\r\n        userTotalStaked[msg.sender] -= userStake.amount;\r\n\r\n        require(stakingToken.transfer(msg.sender, userStake.amount + rewardAmount), \"Token transfer failed\");\r\n        userStake.amount = 0;\r\n    }\r\n\r\n    function withdrawTokens(uint256 amount) external onlyOwner {\r\n        require(amount <= stakingToken.balanceOf(address(this)), \"Insufficient tokens\");\r\n        require(stakingToken.transfer(msg.sender, amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function setLockPeriod(uint256 newLockPeriod) public onlyOwner {\r\n        lockPeriod = newLockPeriod;\r\n    }\r\n\r\n    function setMinStake(uint256 newMinStake) public onlyOwner {\r\n        minStake = newMinStake;\r\n    }\r\n\r\n    function changeRewardRate(uint _rewardRate) public onlyOwner{\r\n        rewardRate = _rewardRate;\r\n    }\r\n\r\n    function setMaxStake(uint256 newMaxStake) public onlyOwner {\r\n        maxStake = newMaxStake;\r\n    }\r\n}"
        }
    },
    "settings": {
        "evmVersion": "paris",
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}